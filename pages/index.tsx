import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import { useEffect, useState } from 'react'
import axios from 'axios'
import { Table } from './components/Table'
import { MoneyMove } from './types'

const inter = Inter({ subsets: ['latin'] })
const url = 'https://script.google.com/macros/s/AKfycbwnvwyuUfil4NtQlAKdagrz6EJijWi88rpU9Ou1f9myqWWk65TVjKQ57VtLYm3Qsby7fg/exec'

const calculateBalances = (values: string[][]) => {
  const result = [values[0], values[1]]
  for (let i = 2; i < values.length; i++) {
    let currentRow = values[i]
    const prevValueIP = values[i-1][9]
    const prevValueOOO = values[i-1][10]
    if(!currentRow[1]) {
      currentRow[9] = prevValueIP;
      currentRow[10] = prevValueOOO;
      result.push(currentRow)
    } else {
      const currentIncome = values[i][3] || 0
      const currentExpense = values[i][4] || 0
      const currentAccountType = values[i][7]
      if(currentAccountType === 'OOO') {
        currentRow[10] =
          parseFloat(prevValueOOO) +
          parseFloat(currentIncome) +
          parseFloat(currentExpense);
        currentRow[9] = prevValueIP
      } else {
        currentRow[9] =
          parseFloat(prevValueIP) +
          parseFloat(currentIncome) +
          parseFloat(currentExpense);
        currentRow[10] = prevValueOOO;
      }
      result.push(currentRow)
    }
  }
  return result
}
export default function Home() {
  const [calcs, setCalcs] = useState<string[][]>([])
  const [incomes, setIncomes] = useState<string[][]>([])
  const [expenses, setExpenses] = useState<string[][]>([])
  useEffect(() => {
    async function get() {
      const res = await axios.get(url);
      setCalcs(
        res.data.calcs.map((row, i) =>
          i <= 1
            ? ['№', true, ...row]
            : [ i, true, ...row.map((value, index) => {
              return (index >= row.length - 2 ? "" : index === 5 && value ? value === "Счёт рублевый ООО" ? "OOO" : "IP" : value)
            })]
        )
      );
      setIncomes(res.data.income);
      setExpenses(res.data.expense);
    }
    get()
  }, [])
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {calcs?.length ? (
          <Table<MoneyMove>
            data={calculateBalances(calcs)}
            renderFuncs={[
              undefined,
              (value, rowIndex) => (
                <input
                  type={"checkbox"}
                  checked={value}
                  onChange={(ev) => {
                    let newCalcs = [...calcs];

                    newCalcs[rowIndex][1] = ev.target.checked;

                    setCalcs(newCalcs);
                  }}
                />
              ),
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              (value, rowIndex) => (
                <select
                  value={value}
                  onChange={(ev) => {
                    let newCalcs = [...calcs];

                    newCalcs[rowIndex][7] = ev.target.value;

                    setCalcs(newCalcs);
                  }}
                >
                  <option value={""}></option>
                  <option value={"IP"}>Счёт рублевый ИП</option>
                  <option value={"OOO"}>Счёт рублевый ООО</option>
                </select>
              ),
            ]}
          />
        ) : null}
        {incomes?.length ? (
          <>
            <Table data={incomes} />
            {/* TODO Make expences/incomes adjustable */}
            <button
              onClick={() => {
                // TODO Add a modal form to create income/expense
                const newIncome = [
                  "15",
                  "150000",
                  "",
                  "New income",
                  "Счёт рублевый ООО",
                ];
                setIncomes([...incomes, newIncome]);
                // TODO Recalculate balances with added expense in mind
              }}
            >
              Добавить постоянный доход
            </button>
          </>
        ) : null}
        {expenses?.length ? (
          <>
            <Table data={expenses} />
            <button
              onClick={() => {
                const newExpense = [
                  "5",
                  "",
                  "-50000",
                  "New expense",
                  "Счёт рублевый ООО",
                ];
                setExpenses([...expenses, newExpense]);
                // TODO Recalculate balances with added expense in mind
              }}
            >
              Добавить постоянный расход
            </button>
          </>
        ) : null}
      </main>
    </>
  );
}
