import Head from 'next/head'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import { useEffect, useState } from 'react'
import axios from 'axios'
import { Table } from './components/Table'
import { BudgetEntry, ConstantMoneyMove } from './types'
import { format, parseISO } from 'date-fns'
import { calculateBudget } from './utils'

const inter = Inter({ subsets: ['latin'] })
const url = 'https://script.google.com/macros/s/AKfycbwnvwyuUfil4NtQlAKdagrz6EJijWi88rpU9Ou1f9myqWWk65TVjKQ57VtLYm3Qsby7fg/exec'

const calculateBalances = (values: BudgetEntry[]) => {
  const result = [values[0], values[1]]
  for (let i = 2; i < values.length; i++) {
    let currentRow = values[i]
    const prevValueIP = values[i-1][8]
    const prevValueOOO = values[i-1][9]
    if(!currentRow[0]) {
      currentRow[8] = prevValueIP;
      currentRow[9] = prevValueOOO;
      result.push(currentRow)
    } else {
      const currentIncome = values[i][2] || 0
      const currentExpense = values[i][3] || 0
      const currentAccountType = values[i][6]
      if(currentAccountType === 'OOO') {
        currentRow[9] =
          parseFloat(prevValueOOO) +
          parseFloat(currentIncome) +
          parseFloat(currentExpense);
        currentRow[8] = prevValueIP
      } else {
        currentRow[8] =
          parseFloat(prevValueIP) +
          parseFloat(currentIncome) +
          parseFloat(currentExpense);
        currentRow[9] = prevValueOOO;
      }
      result.push(currentRow)
    }
  }
  return result
}
export default function Home() {
  const [calcs, setCalcs] = useState<BudgetEntry[]>([])
  const [incomes, setIncomes] = useState<ConstantMoneyMove[]>([])
  const [expenses, setExpenses] = useState<ConstantMoneyMove[]>([])
  const [experimentLength, setExperimentLength] = useState(1)
  useEffect(() => {
    async function get() {
      const res = await axios.get(url);
      const parsedCalcs = res.data.calcs.map((row, i) =>
          i === 0
            ? ['', ...row]
            : i === 1 ?
            [true, ...row]
            : [true, ...row.map((value, index) => {
              return (index >= row.length - 2 ? 0 : index === 5 && value ? value === "Счёт рублевый ООО" ? "OOO" : "IP" : value)
            })]
        )

      const parsedIncomes = res.data.income.map((row, i) =>
          i < 1
            ? [...row]
            : [
                ...row.map((value, index) => {
                  return index === 4 && value
                    ? value === "Счёт рублевый ООО"
                      ? "OOO"
                      : "IP"
                    : value;
                }),
              ]
        )

      const parsedExpenses = res.data.expense.map((row, i) =>
          i < 1
            ? [...row]
            : [
                ...row.map((value, index) => {
                  return index === 4 && value
                    ? value === "Счёт рублевый ООО"
                      ? "OOO"
                      : "IP"
                    : value;
                }),
              ]
        )
      setIncomes(parsedIncomes);
      setExpenses(parsedExpenses);
      const calculatedCalcs = calculateBudget(parsedCalcs, parsedIncomes, parsedExpenses, 4)
      setCalcs(calculatedCalcs)
    }
    get()
  }, [])
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      Постоянные доходы
      {incomes?.length ? (
          <>
            <Table
              data={incomes}
              renderFuncs={[
                (value, rowIndex) => (
                  <input
                    type={"number"}
                    value={value}
                    onChange={(ev) => {
                      let newIncomes = [...incomes];

                      newIncomes[rowIndex][0] = ev.target.value;

                      setIncomes(newIncomes);
                    }}
                  />
                ),
                (value, rowIndex) => (
                  <input
                    type={"number"}
                    value={value}
                    onChange={(ev) => {
                      let newIncomes = [...incomes];

                      newIncomes[rowIndex][1] = ev.target.value;

                      setIncomes(newIncomes);
                    }}
                  />
                ),
                (value, rowIndex) => (
                  <input
                    type={"number"}
                    value={value}
                    onChange={(ev) => {
                      let newIncomes = [...incomes];

                      newIncomes[rowIndex][2] = ev.target.value;

                      setIncomes(newIncomes);
                    }}
                  />
                ),
                (value, rowIndex) => (
                  <input
                    value={value}
                    onChange={(ev) => {
                      let newIncomes = [...incomes];

                      newIncomes[rowIndex][3] = ev.target.value;

                      setIncomes(newIncomes);
                    }}
                  />
                ),
                (value, rowIndex) => (
                  <select
                    value={value}
                    onChange={(ev) => {
                      let newIncomes = [...incomes];

                      newIncomes[rowIndex][4] = ev.target.value;

                      setIncomes(newIncomes);
                    }}
                  >
                    <option value={"IP"}>Счёт рублевый ИП</option>
                    <option value={"OOO"}>Счёт рублевый ООО</option>
                  </select>
                ),
              ]}
            />
            <button
              onClick={() => {
                const newIncome: ConstantMoneyMove = [
                  15,
                  150000,
                  0,
                  "New income",
                  'OOO',
                ];
                setIncomes([...incomes, newIncome]);
              }}
            >
              Добавить постоянный доход
            </button>
          </>
        ) : null}
      Постоянные расходы
      {expenses?.length ? (
          <>
            <Table
              data={expenses}
              renderFuncs={[
                (value, rowIndex) => (
                  <input
                    type={"number"}
                    value={value}
                    onChange={(ev) => {
                      let newExpenses = [...expenses];

                      newExpenses[rowIndex][0] = ev.target.value;

                      setExpenses(newExpenses);
                    }}
                  />
                ),
                (value, rowIndex) => (
                  <input
                    type={"number"}
                    value={value}
                    onChange={(ev) => {
                      let newExpenses = [...expenses];

                      newExpenses[rowIndex][1] = ev.target.value;

                      setExpenses(newExpenses);
                    }}
                  />
                ),
                (value, rowIndex) => (
                  <input
                    type={"number"}
                    value={value}
                    onChange={(ev) => {
                      let newExpenses = [...expenses];

                      newExpenses[rowIndex][2] = ev.target.value;

                      setExpenses(newExpenses);
                    }}
                  />
                ),
                (value, rowIndex) => (
                  <input
                    value={value}
                    onChange={(ev) => {
                      let newExpenses = [...expenses];

                      newExpenses[rowIndex][3] = ev.target.value;

                      setExpenses(newExpenses);
                    }}
                  />
                ),
                (value, rowIndex) => (
                  <select
                    value={value}
                    onChange={(ev) => {
                      let newExpenses = [...expenses];

                      newExpenses[rowIndex][4] = ev.target.value;

                      setExpenses(newExpenses);
                    }}
                  >
                    <option value={"IP"}>Счёт рублевый ИП</option>
                    <option value={"OOO"}>Счёт рублевый ООО</option>
                  </select>
                ),
              ]}
            />
            <button
              onClick={() => {
                const newExpense: ConstantMoneyMove = [
                  5,
                  0,
                  -50000,
                  "New expense",
                  'OOO',
                ];
                setExpenses([...expenses, newExpense]);
              }}
            >
              Добавить постоянный расход
            </button>
          </>
        ) : null}
        <label htmlFor="experimentLength">Продолжительность экстраполяции (месяцев)</label>
        <input
          type={"number"}
          name="experimentLength"
          value={experimentLength}
          onChange={(ev) => {
            setExperimentLength(Math.floor(parseFloat(ev.target.value)))
          }}
        />
        <button onClick={async () => {
          const res = await axios.get(url);
          const parsedCalcs = res.data.calcs.map((row, i) =>
            i <= 1
              ? ['', ...row]
              : [true, ...row.map((value, index) => {
                return (index >= row.length - 2 ? 0 : index === 5 && value ? value === "Счёт рублевый ООО" ? "OOO" : "IP" : value)
              })]
          )
          const reCalcs = calculateBudget(parsedCalcs, incomes, expenses, experimentLength)
          setCalcs(reCalcs)
        }}>Calculate</button>
        {calcs?.length ? (
          <Table<BudgetEntry>
            data={calculateBalances(calcs)}
            rowStylingRules={[
              (row) => row[0] ? {} : { opacity: 0.1 },
              (row) => row[6] === 'OOO' ? { backgroundColor: '#76ff03' } : {}  
            ]}
            renderFuncs={[
              (value, rowIndex) => (
                <input
                  type={"checkbox"}
                  checked={value}
                  onChange={(ev) => {
                    let newCalcs = [...calcs];

                    newCalcs[rowIndex][0] = ev.target.checked;

                    setCalcs(newCalcs);
                  }}
                />
              ),
              (value) => format(parseISO(value), 'dd.MM.yyyy'),
              (value: number) => new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(value),
              (value: number) => new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(value),
              undefined,
              undefined,
              (value, rowIndex) => (
                <select
                  value={value}
                  onChange={(ev) => {
                    let newCalcs = [...calcs];

                    newCalcs[rowIndex][6] = ev.target.value;

                    setCalcs(newCalcs);
                  }}
                >
                  <option value={""}></option>
                  <option value={"IP"}>Счёт рублевый ИП</option>
                  <option value={"OOO"}>Счёт рублевый ООО</option>
                </select>
              ),
              undefined,
              (value: number) => new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(value),
              (value: number) => new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB' }).format(value),
            ]}
          />
        ) : null}
      </main>
    </>
  );
}
